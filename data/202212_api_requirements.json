{"_type":"export","__export_format":4,"__export_date":"2022-12-22T11:23:20.564Z","__export_source":"insomnia.desktop.app:v2022.7.0","resources":[{"_id":"req_a91e98b818de43ec854683b6be0606f4","parentId":"wrk_07d1c6e7dbcd479291e3be25a9a65add","modified":1670443404336,"created":1670443404336,"url":"{{ base_url }}/api/summary","name":"/api/summary","description":"","method":"GET","body":{},"parameters":[{"name":"since","disabled":true,"value":"2021-12-07T10:09:25.378Z"},{"name":"before","disabled":true,"value":"2021-12-07T10:09:25.378Z"},{"name":"span","disabled":true,"value":"string"},{"name":"datalogger","disabled":false,"value":"string"}],"headers":[],"authentication":{},"metaSortKey":-1638871765387,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"wrk_07d1c6e7dbcd479291e3be25a9a65add","parentId":null,"modified":1670443404300,"created":1670443404300,"name":"test-candidat-python.yaml","description":"","scope":"design","_type":"workspace"},{"_id":"req_6b7f2a20e0dd4eca9cab381594431f47","parentId":"wrk_07d1c6e7dbcd479291e3be25a9a65add","modified":1670443404330,"created":1670443404330,"url":"{{ base_url }}/api/data","name":"/api/data","description":"","method":"GET","body":{},"parameters":[{"name":"since","disabled":true,"value":"2021-12-07T10:09:25.378Z"},{"name":"before","disabled":true,"value":"2021-12-07T10:09:25.378Z"},{"name":"datalogger","disabled":false,"value":"string"}],"headers":[],"authentication":{},"metaSortKey":-1638871765383,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_f76af32ad60e4ee8aa35b995bc2c7eef","parentId":"wrk_07d1c6e7dbcd479291e3be25a9a65add","modified":1670443404310,"created":1670443404310,"name":"Base Environment","data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1638863173317,"_type":"environment"},{"_id":"jar_401ae1af02674478a28e4c6496ef94d0","parentId":"wrk_07d1c6e7dbcd479291e3be25a9a65add","modified":1670443404320,"created":1670443404320,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_4f9f1aebd2bb42379f3430daf6ee7dfb","parentId":"wrk_07d1c6e7dbcd479291e3be25a9a65add","modified":1671708175756,"created":1670443404325,"fileName":"test-candidat-python.yaml","contents":"openapi: '3.0.0'\ninfo:\n  title: \"Weenat Test Backend\"\n  contact: \n    email: \"dev@weenat.com\"\n  description: |\n    \n    ## Ennoncé\n    \n    Cet exercice vise à mettre en place:\n    \n    - un script de récupération de donnée depuis une tierce partie puis stockage dans une base de donnée;\n    \n    - une interface pour afficher les données récupérées;\n    \n    Le service devra être écrit en python. L'analyse des données devra utiliser les librairies numpy ou pandas.\n    \n  version: \"1.0\"\nservers:\n  - url: http://localhost\ntags:\n  - name: data\ncomponents:\n  parameters:\n    sinceParam: {\n      \"name\": \"since\",\n      \"in\": \"query\",\n      \"description\": \"Filter by date and time. Ingestion date of returned records should be higher than the value provided. Format expected ISO-8601.\",\n      \"schema\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\",\n      }\n    }\n    beforeParam: {\n      \"name\": \"before\",\n      \"in\": \"query\",\n      \"description\": \"Filter by date and time. Ingestion date of returned records should be lower than the value provided. Default is now. Format expected ISO-8601.\",\n      \"schema\": {\n        \"type\": \"string\",\n        \"format\": \"date-time\",\n      },\n      \"allowEmptyValue\": true,\n    }\n    spanParam: {\n      \"name\": \"span\",\n      \"in\": \"query\",\n      \"description\": \"Aggregates data given this parameter. Default value should be raw (meaning no aggregate).\",\n      \"schema\": {\n        \"type\": \"string\",\n        \"enum\": [\"day\", \"hour\", \"max\"]\n      }\n    }\n    dataloggerParam: {\n      \"name\": \"datalogger\",\n      \"in\": \"query\",\n      \"description\": \"Filter by datalogger. This field is required. Should be an exact match of the datalogger id\",\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\",\n      }\n    }\n  schemas:\n    labelField: {\n      \"type\": \"string\",\n      \"enum\": [\"temp\", \"precip\", \"hum\"],\n      \"description\": \"Name of the metric.\"\n    }\n    DataRecordResponse: {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"label\": {\n            \"$ref\": \"#/components/schemas/labelField\"\n          },\n          \"measured_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"value\": {\n            \"type\": \"number\",\n            \"format\": \"float\"\n          }\n        },\n      }\n    }\n    DataRecordAggregateResponse: {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"label\": {\n            \"$ref\": \"#/components/schemas/labelField\"\n          },\n          \"time_slot\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"Begining of the range trimmed to the span. Eg.: if span = day, this value would be: 2021-12-01T00:00:00, 2021-12-02T00:00:00\",\n          },\n          \"value\": {\n            \"type\": \"number\",\n            \"format\": \"float\",\n            \"description\": \"Aggregate of the measurement within the range. Mean for temp and hum metrics, Sum for the rain.\"\n          }\n        }\n      }\n    }\npaths:\n  \"/api/summary\":\n    get:\n      \"operationId\": \"api_fetch_data_aggregates\"\n      \"tags\":\n        - data\n      \"description\": |\n      \n        Endpoint to returns the data stored.\n        \n        The output will be either raw data or aggregates. The behaviour is driven by the query parameter span.\n      \n          Here are the table of corresponding aggregates:\n      \n          - temp: min, max, avg;\n      \n          - hum: min, max, avg;\n      \n          - precip: sum;\n      \n      \"parameters\":\n        - $ref: \"#/components/parameters/sinceParam\"\n        - $ref: \"#/components/parameters/beforeParam\"\n        - $ref: \"#/components/parameters/spanParam\"\n        - $ref: \"#/components/parameters/dataloggerParam\"\n      \"responses\":\n        \"200\":\n          \"description\": \"Array of records matching the input criteria\"\n          \"content\":\n            \"application/json\":\n              \"schema\":\n                \"$ref\": \"#/components/schemas/DataRecordAggregateResponse\"\n  \"/api/data\":\n    get:\n      \"operationId\": \"api_fetch_data_raw\"\n      \"tags\":\n        - data\n      \"description\": \"Endpoint to returns the data stored. The output is the raw data stored.\"\n      \"parameters\":\n        - \"$ref\": \"#/components/parameters/sinceParam\"\n        - \"$ref\": \"#/components/parameters/beforeParam\"\n        - \"$ref\": \"#/components/parameters/dataloggerParam\"\n      \"responses\":\n        \"400\":\n          \"description\": \"Missing required values.\"\n        \"200\":\n          \"description\": \"Array of records matching the input criteria\"\n          \"content\":\n            \"application/json\":\n              \"schema\":\n                \"$ref\": \"#/components/schemas/DataRecordResponse\"\n","contentType":"yaml","_type":"api_spec"},{"_id":"env_21b71f4ee96348959536934796cedc95","parentId":"env_f76af32ad60e4ee8aa35b995bc2c7eef","modified":1670443404313,"created":1670443404313,"name":"OpenAPI env","data":{"scheme":"http","base_path":"","host":"example.com"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1638871765394,"_type":"environment"}]}