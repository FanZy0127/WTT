name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']
        node-version: ['16.x', '18.x']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Python dependencies
      run: |
        python -m venv venv
        source venv/bin/activate || .\venv\Scripts\activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check Node.js version
      run: node -v

    - name: Check npm version
      run: npm -v

    - name: List files in data/extracted/datalogger
      run: ls -la data/extracted/datalogger
      if: runner.os == 'Linux'

    - name: List files in data\extracted\datalogger
      run: dir data\extracted\datalogger
      if: runner.os == 'Windows'

    - name: Install Node dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        cd data/extracted/datalogger
        npm install

    - name: Install Node dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        cd data\extracted\datalogger
        npm install

    - name: Start JSON Server (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        nohup json-server --watch data/extracted/datalogger/db.json &

    - name: Start JSON Server (Windows)
      if: runner.os == 'Windows'
      run: |
        Start-Process -NoNewWindow -FilePath "npm" -ArgumentList "json-server", "--watch", "data/extracted/datalogger/db.json"

    - name: Lint with ruff
      run: |
        source venv/bin/activate || .\venv\Scripts\activate
        ruff .

    - name: Type check with mypy
      run: |
        source venv/bin/activate || .\venv\Scripts\activate
        mypy .

    - name: Format check with black
      run: |
        source venv/bin/activate || .\venv\Scripts\activate
        black --check .

    - name: Run main script (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        source venv/bin/activate || .\venv\Scripts\activate
        hypercorn app.main:app --config hypercorn_config.py

    - name: Run main script (Windows)
      if: runner.os == 'Windows'
      run: |
        .\venv\Scripts\activate
        hypercorn app.main:app --config hypercorn_config.py

    - name: Run tests with pytest (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        source venv/bin/activate || .\venv\Scripts\activate
        pytest --cov=app --cov-report=term-missing:skip-covered --cov-report=xml --cov-report=html

    - name: Run tests with pytest (Windows)
      if: runner.os == 'Windows'
      run: |
        .\venv\Scripts\activate
        pytest --cov=app --cov-report=term-missing:skip-covered --cov-report=xml --cov-report=html

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v3
      with:
        name: html-coverage-report
        path: htmlcov/
